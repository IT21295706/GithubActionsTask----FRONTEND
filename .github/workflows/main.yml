name: Build and Deploy Frontend

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the Code
    - uses: actions/checkout@v4

    # Step 2: Set up Node.js for Angular build
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    # Step 3: Cache npm dependencies
    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm  # Cache location for npm dependencies
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # Step 4: Install Angular CLI globally
    - name: Install Angular CLI
      run: npm install -g @angular/cli

    # Step 5: Install dependencies and build the Angular project
    - name: Install Dependencies and Build Angular
      run: |
        cd papertrl-ui-v2      # navigate to the directory containing package.json
        npm install
        ng build --configuration production

    - name: Print Working Directory
      run: pwd

    - name: List dist folder contents
      run: |
        cd papertrl-ui-v2
        ls -l dist/
      
    # Step 6: Package the Build Files
    - name: Package Angular Build into TAR
      run: |
        cd papertrl-ui-v2
        tar -czvf papertrl-ui-v2.tar.gz -C dist/papertrl-ui-v2 .

    - name: Configure AWS credentials for ECR
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1


    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1


    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: github-actions-task-private  
        IMAGE_TAG: latest-frontend
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
